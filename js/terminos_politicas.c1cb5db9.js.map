me that the service was created, specified in ISO-8601 format.
     */
    createdAt?: Timestamp;
    /**
     * The custom domain name of the service.
     */
    customDomainName?: ServiceCustomDomainName;
    /**
     * The DNS name of the service.
     */
    dnsEntry?: DnsEntry;
    /**
     * The failure code.
     */
    failureCode?: FailureCode;
    /**
     * The failure message.
     */
    failureMessage?: FailureMessage;
    /**
     * The ID of the service.
     */
    id?: ServiceId;
    /**
     * The date and time that the service was last updated, specified in ISO-8601 format.
     */
    lastUpdatedAt?: Timestamp;
    /**
     * The name of the service.
     */
    name?: ServiceName;
    /**
     * The status of the service.
     */
    status?: ServiceStatus;
  }
  export interface GetTargetGroupRequest {
    /**
     * The ID or Amazon Resource Name (ARN) of the target group.
     */
    targetGroupIdentifier: TargetGroupIdentifier;
  }
  export interface GetTargetGroupResponse {
    /**
     * The Amazon Resource Name (ARN) of the target group.
     */
    arn?: TargetGroupArn;
    /**
     * The target group configuration.
     */
    config?: TargetGroupConfig;
    /**
     * The date and time that the target group was created, specified in ISO-8601 format.
     */
    createdAt?: Timestamp;
    /**
     * The failure code.
     */
    failureCode?: String;
    /**
     * The failure message.
     */
    failureMessage?: String;
    /**
     * The ID of the target group.
     */
    id?: TargetGroupId;
    /**
     * The date and time that the target group was last updated, specified in ISO-8601 format.
     */
    lastUpdatedAt?: Timestamp;
    /**
     * The name of the target group.
     */
    name?: TargetGroupName;
    /**
     * The Amazon Resource Names (ARNs) of the service.
     */
    serviceArns?: ServiceArnList;
    /**
     * The status.
     */
    status?: TargetGroupStatus;
    /**
     * The target group type.
     */
    type?: TargetGroupType;
  }
  export interface HeaderMatch {
    /**
     * Indicates whether the match is case sensitive. Defaults to false.
     */
    caseSensitive?: Boolean;
    /**
     * The header match type.
     */
    match: HeaderMatchType;
    /**
     * The name of the header.
     */
    name: HeaderMatchName;
  }
  export type HeaderMatchContains = string;
  export type HeaderMatchExact = string;
  export type HeaderMatchList = HeaderMatch[];
  export type HeaderMatchName = string;
  export type HeaderMatchPrefix = string;
  export interface HeaderMatchType {
    /**
     * Specifies a contains type match.
     */
    contains?: HeaderMatchContains;
    /**
     * Specifies an exact type match.
     */
    exact?: HeaderMatchExact;
    /**
     * Specifies a prefix type match. Matches the value with the prefix.
     */
    prefix?: HeaderMatchPrefix;
  }
  export interface HealthCheckConfig {
    /**
     * Indicates whether health checking is enabled.
     */
    enabled?: Boolean;
    /**
     * The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
     */
    healthCheckIntervalSeconds?: HealthCheckIntervalSeconds;
    /**
     * The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
     */
    healthCheckTimeoutSeconds?: HealthCheckTimeoutSeconds;
    /**
     * The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
     */
    healthyThresholdCount?: HealthyThresholdCount;
    /**
     * The codes to use when checking for a successful response from a target. These are called Success codes in the console.
     */
    matcher?: Matcher;
    /**
     * The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is /. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
     */
    path?: HealthCheckPath;
    /**
     * The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
     */
    port?: HealthCheckPort;
    /**
     * The protocol used when performing health checks on targets. The possible protocols are HTTP and HTTPS. The default is HTTP.
     */
    protocol?: TargetGroupProtocol;
    /**
     * The protocol version used when performing health checks on targets. The possible protocol versions are HTTP1 and HTTP2.
     */
    protocolVersion?: HealthCheckProtocolVersion;
    /**
     * The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
     */
    unhealthyThresholdCount?: UnhealthyThresholdCount;
  }
  export type HealthCheckIntervalSeconds = number;
  export type HealthCheckPath = string;
  export type HealthCheckPort = number;
  export type HealthCheckProtocolVersion = "HTTP1"|"HTTP2"|string;
  export type HealthCheckTimeoutSeconds = number;
  export type HealthyThresholdCount = number;
  export type HttpCodeMatcher = string;
  export interface HttpMatch {
    /**
     * The header matches. Matches incoming requests with rule based on request header value before applying rule action.
     */
    headerMatches?: HeaderMatchList;
    /**
     * The HTTP method type.
     */
    method?: HttpMethod;
    /**
     * The path match.
     */
    pathMatch?: PathMatch;
  }
  export type HttpMethod = string;
  export type HttpStatusCode = number;
  export type IpAddressType = "IPV4"|"IPV6"|string;
  export type LambdaEventStructureVersion = "V1"|"V2"|string;
  export interface ListAccessLogSubscriptionsRequest {
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
    /**
     * The ID or Amazon Resource Name (ARN) of the service network or service.
     */
    resourceIdentifier: ResourceIdentifier;
  }
  export interface ListAccessLogSubscriptionsResponse {
    /**
     * The access log subscriptions.
     */
    items: AccessLogSubscriptionList;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListListenersRequest {
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
    /**
     * The ID or Amazon Resource Name (ARN) of the service.
     */
    serviceIdentifier: ServiceIdentifier;
  }
  export interface ListListenersResponse {
    /**
     * Information about the listeners.
     */
    items: ListenerSummaryList;
    /**
     * If there are additional results, a pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListRulesRequest {
    /**
     * The ID or Amazon Resource Name (ARN) of the listener.
     */
    listenerIdentifier: ListenerIdentifier;
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
    /**
     * The ID or Amazon Resource Name (ARN) of the service.
     */
    serviceIdentifier: ServiceIdentifier;
  }
  export interface ListRulesResponse {
    /**
     * Information about the rules.
     */
    items: RuleSummaryList;
    /**
     * If there are additional results, a pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListServiceNetworkServiceAssociationsRequest {
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
    /**
     * The ID or Amazon Resource Name (ARN) of the service.
     */
    serviceIdentifier?: ServiceIdentifier;
    /**
     * The ID or Amazon Resource Name (ARN) of the service network.
     */
    serviceNetworkIdentifier?: ServiceNetworkIdentifier;
  }
  export interface ListServiceNetworkServiceAssociationsResponse {
    /**
     * Information about the associations.
     */
    items: ServiceNetworkServiceAssociationList;
    /**
     * If there are additional results, a pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListServiceNetworkVpcAssociationsRequest {
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
    /**
     * The ID or Amazon Resource Name (ARN) of the service network.
     */
    serviceNetworkIdentifier?: ServiceNetworkIdentifier;
    /**
     * The ID or Amazon Resource Name (ARN) of the VPC.
     */
    vpcIdentifier?: VpcId;
  }
  export interface ListServiceNetworkVpcAssociationsResponse {
    /**
     * Information about the associations.
     */
    items: ServiceNetworkVpcAssociationList;
    /**
     * If there are additional results, a pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListServiceNetworksRequest {
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListServiceNetworksResponse {
    /**
     * Information about the service networks.
     */
    items: ServiceNetworkList;
    /**
     * If there are additional results, a pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListServicesRequest {
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListServicesResponse {
    /**
     * The services.
     */
    items?: ServiceList;
    /**
     * If there are additional results, a pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListTagsForResourceRequest {
    /**
     * The Amazon Resource Name (ARN) of the resource.
     */
    resourceArn: Arn;
  }
  export interface ListTagsForResourceResponse {
    /**
     * The tags.
     */
    tags?: TagMap;
  }
  export interface ListTargetGroupsRequest {
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
    /**
     * The target group type.
     */
    targetGroupType?: TargetGroupType;
    /**
     * The ID or Amazon Resource Name (ARN) of the service.
     */
    vpcIdentifier?: VpcId;
  }
  export interface ListTargetGroupsResponse {
    /**
     * Information about the target groups.
     */
    items?: TargetGroupList;
    /**
     * If there are additional results, a pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export interface ListTargetsRequest {
    /**
     * The maximum number of results to return.
     */
    maxResults?: MaxResults;
    /**
     * A pagination token for the next page of results.
     */
    nextToken?: NextToken;
    /**
     * The ID or Amazon Resource Name (ARN) of the target group.
     */
    targetGroupIdentifier: TargetGroupIdentifier;
    /**
     * The targets to list.
     */
    targets?: ListTargetsRequestTargetsList;
  }
  export type ListTargetsRequestTargetsList = Target[];
  export interface ListTargetsResponse {
    /**
     * Information about the targets.
     */
    items: TargetSummaryList;
    /**
     * If there are additional results, a pagination token for the next page of results.
     */
    nextToken?: NextToken;
  }
  export type ListenerArn = string;
  export type ListenerId = string;
  export type ListenerIdentifier = string;
  export type ListenerName = string;
  export type ListenerProtocol = "HTTP"|"HTTPS"|string;
  export interface ListenerSummary {
    /**
     * The Amazon Resource Name (ARN) of the listener.
     */
    arn?: ListenerArn;
    /**
     * The date and time that the listener was created, specified in ISO-8601 format.
     */
    createdAt?: Timestamp;
    /**
     * The ID of the listener.
     */
    id?: ListenerId;
    /**
     * The date and time that the listener was last updated, specified in ISO-8601 format.
     */
    lastUpdatedAt?: Timestamp;
    /**
     * The name of the listener.
     */
    name?: ListenerName;
    /**
     * The listener port.
     */
    port?: Port;
    /**
     * The listener protocol.
     */
    protocol?: ListenerProtocol;
  }
  export type ListenerSummaryList = ListenerSummary[];
  export type Long = number;
  export interface Matcher {
    /**
     * The HTTP code to use when checking for a successful response from a target.
     */
    httpCode?: HttpCodeMatcher;
  }
  export type MaxResults = number;
  export type NextToken = string;
  export interface PathMatch {
    /**
     * Indicates whether the match is case sensitive. Defaults to false.
     */
    caseSensitive?: Boolean;
    /**
     * The type of path match.
     */
    match: PathMatchType;
  }
  export type PathMatchExact = string;
  export type PathMatchPrefix = string;
  export interface PathMatchType {
    /**
     * An exact match of the path.
     */
    exact?: PathMatchExact;
    /**
     * A prefix match of the path.
     */
    prefix?: PathMatchPrefix;
  }
  export type PolicyString = string;
  export type Port = number;
  export interface PutAuthPolicyRequest {
    /**
     * The auth policy.
     */
    policy: AuthPolicyString;
    /**
     * The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
     */
    resourceIdentifier: ResourceIdentifier;
  }
  export interface PutAuthPolicyResponse {
    /**
     * The auth policy.
     */
    policy?: AuthPolicyString;
    /**
     * The state of the auth policy. The auth policy is only active when the auth type is set to Amazon Web Services_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive. For more information, see Create a service network in the Amazon VPC Lattice User Guide.
     */
    state?: AuthPolicyState;
  }
  export interface PutResourcePolicyRequest {
    /**
     * An IAM policy.
     */
    policy: PolicyString;
    /**
     * The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
     */
    resourceArn: ResourceArn;
  }
  export interface PutResourcePolicyResponse {
  }
  export interface RegisterTargetsRequest {
    /**
     * The ID or Amazon Resource Name (ARN) of the target group.
     */
    targetGroupIdentifier: TargetGroupIdentifier;
    /**
     * The targets.
     */
    targets: RegisterTargetsRequestTargetsList;
  }
  export type RegisterTargetsRequestTargetsList = Target[];
  export interface RegisterTargetsResponse {
    /**
     * The targets that were successfully registered.
     */
    successful?: TargetList;
    /**
     * The targets that were not registered.
     */
    unsuccessful?: TargetFailureList;
  }
  export type ResourceArn = string;
  export type ResourceId = string;
  export type ResourceIdentifier = string;
  export interface RuleAction {
    /**
     *  Describes the rule action that returns a custom HTTP response. 
     */
    fixedResponse?: FixedResponseAction;
    /**
     * The forward action. Traffic that matches the rule is forwarded to the specified target groups.
     */
    forward?: ForwardAction;
  }
  export type RuleArn = string;
  export type RuleId = string;
  export type RuleIdentifier = string;
  export interface RuleMatch {
    /**
     * The HTTP criteria that a rule must match.
     */
    httpMatch?: HttpMatch;
  }
  export type RuleName = string;
  export type RulePriority = number;
  export interface RuleSummary {
    /**
     * The Amazon Resource Name (ARN) of the rule.
     */
    arn?: RuleArn;
    /**
     * The date and time that the listener rule was created, specified in ISO-8601 format.
     */
    createdAt?: Timestamp;
    /**
     * The ID of the rule.
     */
    id?: RuleId;
    /**
     * Indicates whether this is the default rule. Listener rules are created when you create a listener. Each listener has a default rule for checking connection requests. 
     */
    isDefault?: Boolean;
    /**
     * The date and time that the listener rule was last updated, specified in ISO-8601 format.
     */
    lastUpdatedAt?: Timestamp;
    /**
     * The name of the rule.
     */
    name?: RuleName;
    /**
     *  The priority of the rule. 
     */
    priority?: RulePriority;
  }
  export type RuleSummaryList = RuleSummary[];
  export interface RuleUpdate {
    /**
     * The rule action.
     */
    action?: RuleAction;
    /**
     * The rule match.
     */
    match?: RuleMatch;
    /**
     * The rule priority. A listener can't have multiple rules with the same priority.
     */
    priority?: RulePriority;
    /**
     * The ID or Amazon Resource Name (ARN) of the rule.
     */
    ruleIdentifier: RuleIdentifier;
  }
  export interface RuleUpdateFailure {
    /**
     * The failure code.
     */
    failureCode?: FailureCode;
    /**
     * The failure message.
     */
    failureMessage?: FailureMessage;
    /**
     * The ID or Amazon Resource Name (ARN) of the rule.
     */
    ruleIdentifier?: RuleIdentifier;
  }
  export type RuleUpdateFailureList = RuleUpdateFailure[];
  export type RuleUpdateList = RuleUpdate[];
  export interface RuleUpdateSuccess {
    /**
     * The action for the default rule.
     */
    action?: RuleAction;
    /**
     * The Amazon Resource Name (ARN) of the listener.
     */
    arn?: RuleArn;
    /**
     * The ID of the listener.
     */
    id?: RuleId;
    /**
     * Indicates whether this is the default rule.
     */
    isDefault?: Boolean;
    /**
     * The rule match.
     */
    match?: RuleMatch;
    /**
     * The name of the listener.
     */
    name?: RuleName;
    /**
     * The rule priority.
     */
    priority?: RulePriority;
  }
  export type RuleUpdateSuccessList = RuleUpdateSuccess[];
  export type SecurityGroupId = string;
  export type SecurityGroupList = SecurityGroupId[];
  export type ServiceArn = string;
  export type ServiceArnList = ServiceArn[];
  export type ServiceCustomDomainName = string;
  export type ServiceId = string;
  export type ServiceIdentifier = string;
  export type ServiceList = ServiceSummary[];
  export type ServiceName = string;
  export type ServiceNetworkArn = string;
  export type ServiceNetworkId = string;
  export type ServiceNetworkIdentifier = string;
  export type ServiceNetworkList = ServiceNetworkSummary[];
  export type ServiceNetworkName = string;
  export type ServiceNetworkServiceAssociationArn = string;
  export type ServiceNetworkServiceAssociationIdentifier = string;
  export type ServiceNetworkServiceAssociationList = ServiceNetworkServiceAssociationSummary[];
  export type ServiceNetworkServiceAssociationStatus = "CREATE_IN_PROGRESS"|"ACTIVE"|"DELETE_IN_PROGRESS"|"CREATE_FAILED"|"DELETE_FAILED"|string;
  export interface ServiceNetworkServiceAssociationSummary {
    /**
     * The Amazon Resource Name (ARN) of the association.
     */
    arn?: ServiceNetworkServiceAssociationArn;
    /**
     * The date and time that the association was created, specified in ISO-8601 format.
     */
    createdAt?: Timestamp;
    /**
     * The account that created the association.
     */
    createdBy?: AccountId;
    /**
     *  The custom domain name of the service. 
     */
    customDomainName?: ServiceCustomDomainName;
    /**
     * DNS information about the service.
     */
    dnsEntry?: DnsEntry;
    /**
     * The ID of the association.
     */
    id?: ServiceNetworkServiceAssociationIdentifier;
    /**
     * The Amazon Resource Name (ARN) of the service.
     */
    serviceArn?: ServiceArn;
    /**
     * The ID of the service.
     */
    serviceId?: ServiceId;
    /**
     * The name of the service.
     */
    serviceName?: ServiceName;
    /**
     * The Amazon Resource Name (ARN) of the serv